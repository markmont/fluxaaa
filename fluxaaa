#!/usr/bin/perl -wT
#
# fluxaaa -- Flux Allocation and Account Adviser
#   Reports on which allocations users should be added to on the Flux
#   High Performance Compute cluster at the University of Michigan.
#
# 20130222 markmont@umich.edu
#   * Initial version
#

use strict;
use warnings;

use Net::LDAP;
use Getopt::Long;
use Data::Dumper;

BEGIN {
    push( @INC, '/home2/markmont/accounts' ); # Where to find fluxaaa.conf
    %ENV = (); # for security
}

our ( @managed_allocations, @attrs );
our ( $ldap_server, $ca_file, $bind_dn, $bind_password, $search_base );
our ( %override_add, %override_remove );
our ( $ticket_email, $default_from, $MDIAG, $SENDMAIL );
require "fluxaaa.conf";

my $passwd_file = '/etc/passwd';
my $ldap;
my $show_ldap_entry = 0;
my $do_audit = 0;
my $create_ticket = 0;
my $show_usage = 0;
my $debug = 0;
my $error = 0;
my %allocation_user = ();         # users actually in each allocation
my %allocation_policy_user = ();  # users who should be in each allocation according to the policy we're using


sub
get_allocation_userlist {
    my $allocation = $_[0];

    print "Getting userlist for allocation $allocation ...\n" if $debug;

    if ( $allocation !~ /^([a-z0-9_]+)$/ ) {
        print "illegal allocation name, skipping: $allocation\n";
        $error = 1;
        return;
    }
    $allocation = $1; # untaint

    open( MDIAG, "$MDIAG -a $allocation |" )
        or die "Unable to run mdiag: $!";
    while ( my $line = <MDIAG> ) {
        print $line if $debug;
        next unless $line =~ s/^\s+Users:\s+//;
        chomp( $line );
        for my $user ( split( ',', $line ) ) {
            $allocation_user{$allocation}{$user} = 1;
        }
    }
    close( MDIAG );

}


sub
lookup_user {
    my $user = $_[0];
    print "Searching LDAP for uid=$user ...\n" if $debug;
    my $msg = $ldap->search(
        base => $search_base,
        scope =>'sub',
        filter => "uid=$user",
        attrs => \@attrs
        );
    die "LDAP search failed: " . $msg->error() if $msg->code();

    my %user_info = ();

    print "Parsing search results...\n" if $debug;
    for my $entry ( $msg->entries() ) {
        if ( $debug || $show_ldap_entry ) {
            print "\n";
            $entry->dump;
            print "\n";
        }
        foreach my $attr ( $entry->attributes() ) {
            if ( $attr eq 'umichSponsorshipDetail'
                || $attr eq 'umichHR'
                || $attr eq 'umichAAAcadProgram' ) {
                for my $value ( $entry->get_value( $attr ) ) {
                    $value =~ s/^\{//; # Remove leading {
                    $value =~ s/\}$//; # Remove trailing }
                    my @fields = split( /\}:\{/, $value );
                    my %h = ();
                    for my $field (@fields) {
                        my ($k, $v) = split( /=/, $field, 2 );
                        $h{$k} = $v;
                    }
                    push( @{$user_info{$attr}}, \%h );
                }
            } else {
                $user_info{$attr} = $entry->get_value( $attr, asref => 1 );
            }
        }
    }

    # A fake attribute in case the user is not in LDAP but is in an
    # override list.
    $user_info{'fluxaaa_username'} = $user;

    return \%user_info;

}


sub
determine_user_allocations {
    my $user_info = $_[0];

    my %a = ();

    # Examples of accessing $user_info data values:
    #print $$user_info{'ou'}[0] . "\n";  # First ou value
    #print $$user_info{'ou'}[1] . "\n";  # Second ou value
    #print $$user_info{'umichHR'}[0]{'jobcode'} . "\n";  # First jobcode
    #print $$user_info{'umichHR'}[1]{'jobcode'} . "\n";  # Second jobcode

    # lsa_flux
    #   if ou =~ /^College of Lit, Science & Arts/
    #   or umichHR -> deptGroup = COLLEGE_OF_LSA
    #   or umichAAAcadProgram -> acadGroup = LSA
    #   or umichSponsorshipDetail -> deptGroup = COLLEGE_OF_LSA

    $a{'lsa_flux'}++ if (
        grep( /^College of Lit, Science & Arts/, @{$$user_info{'ou'}} ) );
    $a{'lsa_flux'}++ if (
        grep( ${$_}{'deptGroup'} eq 'COLLEGE_OF_LSA',
            @{$$user_info{'umichHR'}} ) );
    $a{'lsa_flux'}++ if (
        grep( ${$_}{'acadGroup'} eq 'LSA',
            @{$$user_info{'umichAAAcadProgram'}} ) );
    $a{'lsa_flux'}++ if (
        grep( ${$_}{'deptGroup'} eq 'COLLEGE_OF_LSA',
            @{$$user_info{'umichSponsorshipDetail'}} ) );

    # polisci_flux
    #   if ou =~ /^LSA Political Science/
    #   or umichHR -> deptDescription = LSA Political Science
    #   or umichAAAcadProgram -> acadPlanFieldDescr = Political Science
    #   or umichSponsorshipDetail -> deptDescription = LSA Political Science

    $a{'polisci_flux'}++ if (
        grep( /^LSA Political Science/, @{$$user_info{'ou'}} ) );
    $a{'polisci_flux'}++ if (
        grep( ${$_}{'deptDescription'} eq 'LSA Political Science',
            @{$$user_info{'umichHR'}} ) );
    $a{'polisci_flux'}++ if (
        grep( ${$_}{'acadPlanFieldDescr'} eq 'Political Science',
            @{$$user_info{'umichAAAcadProgram'}} ) );
    $a{'polisci_flux'}++ if (
        grep( ${$_}{'deptDescription'} eq ' LSA Political Science',
            @{$$user_info{'umichSponsorshipDetail'}} ) );

    # stats_flux
    #   if umichAAAcadProgram -> acadPlanDescr = Statistics PhD

    $a{'stats_flux'}++ if (
        grep( ${$_}{'acadPlanDescr'} eq 'Statistics PhD',
            @{$$user_info{'umichAAAcadProgram'}} ) );


    #
    # Overrides:
    #
    
    my $u = $$user_info{'fluxaaa_username'};

    if ( my $allocs = $override_add{$u} ) {
        for my $alloc (keys(%$allocs)) {
            print "override: adding $u to $alloc\n" if $debug;
            $a{$alloc}++;
        }
    }

    if ( my $allocs = $override_remove{$u} ) {
        for my $alloc (keys(%$allocs)) {
            print "override: removing $u from $alloc\n" if $debug;
            delete $a{$alloc};
        }
    }

    return %a;

}


sub
check_users {
    my @users = @_;

    for my $user (@users) {
        if ( $user !~ /^([a-z0-9]{3,32})$/i ) {
            print "illegal username, skipping: $user\n";
            $error = 1;
            next;
        }
        $user = $1; # untaint
        my $user_info = lookup_user( $user );
        my %allocations = determine_user_allocations( $user_info );
        if ( $debug ) {
            print "Results for $user are:\n";
            for my $allocation ( keys( %allocations ) ) {
                print "$allocation: $user\n";
            }
        }
        for my $allocation ( keys( %allocations ) ) {
            $allocation_policy_user{$allocation}{$user} = 1;
        }
    }

    print "Results for all users:\n" if $debug;
    my @output = ();
    for my $a ( sort( keys ( %allocation_policy_user ) ) ) {
        my $line = "$a: "
            . join( ',', sort( keys ( %{$allocation_policy_user{$a}} ) ) )
            . "\n";
        push( @output, $line );
        print $line;
    }

    if ( $create_ticket ) {
        my $from = $default_from;
        if ( $< >= 1000 && getpwuid( $< ) ) {
            $from = getpwuid( $< ) . '@umich.edu';
        }
        open( SENDMAIL, "|$SENDMAIL -t -f $from 1>/dev/null 2>&1" )
            or die "Unable to run $SENDMAIL: $!";
        my @output0 = ();
        push( @output0, "From: $from\n" );
        push( @output0, "To: $ticket_email\n" );
        push( @output0, "Subject: Allocation userlist change request\n" );
        push( @output0, "\n" );
        push( @output0, "Please add the following users to the allocations:\n\n" );
        print "Sending email:\n\n" . join( '', @output0, @output );
        print SENDMAIL join( '', @output0, @output );
        close( SENDMAIL );

    }
    

}

sub
check_allocations {
    my @allocations = @_;

    # Generate list of all users to search for in LDAP:
    my %user = ();
    for my $a (@allocations) {
        for my $u ( keys( %{$allocation_user{$a}} ) ) {
            $user{$u}++;
        }
    }
    print "Reading list of accounts from $passwd_file ...\n" if $debug;
    open( PASSWD, "< $passwd_file" )
        or die "Unable to open $passwd_file: $!";
    while ( my $line = <PASSWD> ) {
        my @f = split( ':', $line, 4 );
        next unless $f[2] >= 1000; # skip system accounts
        if ( $f[0] !~ /^([a-z0-9]{3,32})$/i ) {
            print "illegal username in $passwd_file, skipping: $f[0]\n";
            next;
        }
        $user{$f[0]}++;
    }
    close( PASSWD );

    # Get information on all of the users from LDAP:
    for my $u ( keys( %user ) ) {
        my $user_info = lookup_user( $u );
        my %a = determine_user_allocations( $user_info );
        for my $a ( keys( %a ) ) {
            $allocation_policy_user{$a}{$u} = 1;
        }
    }

    # Find users who should be added to allocations:
    #   not in %allocation_user
    #   but is in %allocation_policy_user
    print "Calculating additions:\n" if $debug;
    my %allocation_add_user = ();
    for my $a ( keys ( %allocation_policy_user ) ) {
        for my $u ( keys( %{$allocation_policy_user{$a}} ) ) {
            $allocation_add_user{$a}{$u} = 1 unless
                $allocation_user{$a}{$u};
            print "  allocation $a should have user $u and actually " . ( $allocation_policy_user{$a}{$u} ? "does" : "does NOT" ) . "\n" if $debug;
        }
    }

    # Find users who should be removed from allocations:
    #   is in %allocation_user
    #   but not in %allocation_policy_user
    print "Calculating removals:\n" if $debug;
    my %allocation_remove_user = ();
    for my $a ( keys ( %allocation_user ) ) {
        for my $u ( keys( %{$allocation_user{$a}} ) ) {
            $allocation_remove_user{$a}{$u} = 1 unless
                $allocation_policy_user{$a}{$u};
            print "  allocation $a has user $u who " . ( $allocation_policy_user{$a}{$u} ? "should" : "should NOT" ) . " be in that allocation\n" if $debug;
        }
    }

    # Print results:
    print "\nSet the userlist to:\n\n";
    for my $a ( keys ( %allocation_policy_user ) ) {
        next unless grep ( $_ eq $a, @allocations );
        print "set $a: "
            . join( ',', sort( keys ( %{$allocation_policy_user{$a}} ) ) )
            . "\n";
    }
    print "\nAdd the following:\n\n";
    for my $a ( sort( keys ( %allocation_add_user ) ) ) {
        next unless grep ( $_ eq $a, @allocations );
        print "ADD TO $a: "
            . join( ',', sort( keys ( %{$allocation_add_user{$a}} ) ) )
            . "\n";
    }
    print "\nCONSIDER removing the following (policy does not say that these users should be in these allocations, but they may be legitimate nonetheless):\n\n";
    for my $a ( sort( keys ( %allocation_remove_user ) ) ) {
        next unless grep ( $_ eq $a, @allocations );
        print "REMOVE FROM $a: "
            . join( ',', sort( keys ( %{$allocation_remove_user{$a}} ) ) )
            . "\n";
    }
    print "\n";
    

}


#
# MAIN PROGRAM:
#

my $result = GetOptions(
  'show'          => \$show_ldap_entry,
  'audit'         => \$do_audit,
  'create-ticket' => \$create_ticket,
  'passwd-file=s' => \$passwd_file,
  'help'          => \$show_usage,
  'debug'         => \$debug,
  );
if ( ! $result || $show_usage ) {
    print "usage: \n";
    print "  $0 [--show] [--create-ticket] [--debug] user1 userame2 ...\n";
    print "  $0 [--debug] --audit [--passwd-file=FILE] [allocation1 allocation2 ...]\n";
    exit( $show_usage ? 0 : 1 );
}

my @audit_allocations = @managed_allocations;
if ($do_audit) {
    @audit_allocations = @ARGV if (@ARGV);
    print "Will audit the following allocations:\n  "
        . join( ' ', @audit_allocations ) . "\n" if $debug;
    for my $a (@audit_allocations) {
        get_allocation_userlist( $a );
    }
    print "Allocation userlist:\n" if $debug;
    print Dumper( \%allocation_user ) if $debug;
}

print "Connecting to LDAP ($ldap_server) ...\n" if $debug;
$ldap = Net::LDAP->new( $ldap_server, version => 3 )
    or die "LDAP connect failed: $@";

print "Doing LDAP start_tls...\n" if $debug;
my $msg = $ldap->start_tls( verify=> 'require', cafile => $ca_file );
die "LDAP start_tls failed: " . $msg->error() if $msg->code();

print "Binding to LDAP as $bind_dn ...\n" if $debug;
$msg = $ldap->bind( $bind_dn, password => $bind_password );
die "LDAP bind failed: " . $msg->error() if $msg->code();

@attrs = () if $show_ldap_entry; # query all attributes

if ( $do_audit ) {
    check_allocations( @audit_allocations );
} else {
    check_users( @ARGV );
}

print "Unbinding from LDAP...\n" if $debug;
$ldap->unbind();
print "Exiting with return code $error\n" if $debug;
exit( $error );

